{"version":3,"sources":["color.js","sections/header.js","sections/manifesto.js","App.js","serviceWorker.js","index.js","assets/logo.png"],"names":["colors","primary","primaryDark","primaryLight","textOnPrimary","textOnPrimaryDark","textOnPrimaryLight","grayDark","textOnFire","gray","textOnFireDark","textOnAlternative","alternative","fire","fireDark","styleHeader","HeaderContainer","backgroundColor","Colors","height","width","Layout1","overflow","background","position","Layout2","marginLeft","Logo1","maxHeight","pointerEvents","transform","padding","maxWidth","Logo1Container","marginRight","Logo2","Logo2Container","AppHeader","react_default","a","createElement","style","src","Logo","Component","styleManifesto","overflowY","App","className","header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"gQAkBeA,QAjBD,CACVC,QAAQ,UACRC,YAAY,UACZC,aAAa,UACbC,cAAc,UACdC,kBAAkB,UAClBC,mBAAmB,UACnBC,SAAS,UACTC,WAAW,UACXC,KAAK,UACLC,eAAe,UACfC,kBAAkB,UAClBC,YAAY,UACZC,KAAK,UACLC,SAAS,YCRPC,EAAa,CACfC,gBAAgB,CACZC,gBAAgBC,EAAOL,KACvBM,OAAQ,QACRC,MAAM,SAGVC,QAAQ,CACJF,OAAQ,QACRG,SAAS,SACTF,MAAO,OACPG,WAAYL,EAAOT,KACnBe,SAAU,SAEdC,QAAQ,CACJH,SAAS,SACTH,OAAQ,QACRC,MAAO,OACPG,WAAYL,EAAOT,KACnBiB,WAAY,QAEhBC,MAAM,CACFC,UAAW,OACXC,cAAe,OACfC,UAAW,iBACXC,QAAS,OACTC,SAAU,QAEdC,eAAe,CACXC,YAAa,QACbJ,UAAW,gBACXP,WAAYL,EAAOhB,aAEvBiC,MAAM,CACFH,SAAU,OACVJ,UAAW,OACXE,UAAW,gBACXC,QAAS,OACTF,cAAe,QAEnBO,eAAe,CACXN,UAAW,iBACXP,WAAYL,EAAOhB,YACnBwB,WAAY,UAsBLW,mLAhBP,OACCC,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAYC,iBACrBsB,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAYM,SACxBiB,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAYkB,gBACxBK,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAYY,MAAOe,IAAKC,QAGpCL,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAYU,SACxBa,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAYqB,gBACxBE,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAYoB,MAAOO,IAAKC,gBAXxBC,aCjDlBC,EAAgB,CAClB7B,gBAAgB,CACZC,gBAAgBC,EAAOT,KACvBqC,UAAW,OACX3B,OAAQ,QACRC,MAAM,UCIC2B,GDASH,6LCRpB,OACEN,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACS,EAAD,cAJUL,cCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a9af0d6d.chunk.js","sourcesContent":["\r\nconst colors ={\r\n    primary:'#22b5c0',\r\n    primaryDark:'#008590',\r\n    primaryLight:'#68e8f3',\r\n    textOnPrimary:'#000000',\r\n    textOnPrimaryDark:'#000000',\r\n    textOnPrimaryLight:'#000000',\r\n    grayDark:'#19212b',\r\n    textOnFire:'#000000',\r\n    gray:'#eceff1',\r\n    textOnFireDark:'#000000',\r\n    textOnAlternative:'#ffffff',\r\n    alternative:'#e73944',\r\n    fire:'#f9b427',\r\n    fireDark:'#ee781f'\r\n}\r\n\r\nexport default colors","import React, { Component } from 'react';\r\nimport Logo from '../assets/logo.png'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport '../App.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Colors from '../color.js';\r\nconst styleHeader ={\r\n    HeaderContainer:{\r\n        backgroundColor:Colors.fire,\r\n        height: '500vh',\r\n        width:'100vw',\r\n    },\r\n    \r\n    Layout1:{\r\n        height: '100vh',\r\n        overflow:'hidden',\r\n        width: '50vw',\r\n        background: Colors.gray,\r\n        position: 'fixed',\r\n    },\r\n    Layout2:{\r\n        overflow:'hidden',\r\n        height: '100vh',\r\n        width: '50vw',\r\n        background: Colors.gray,\r\n        marginLeft: '50vw',\r\n    },\r\n    Logo1:{\r\n        maxHeight: '60vh',\r\n        pointerEvents: 'none',\r\n        transform: 'rotate(-45deg)',\r\n        padding: '40px',\r\n        maxWidth: '80vw',\r\n    },\r\n    Logo1Container:{\r\n        marginRight: '-50vw',\r\n        transform: 'rotate(45deg)',\r\n        background: Colors.primaryDark\r\n    },\r\n    Logo2:{\r\n        maxWidth: '80vw',\r\n        maxHeight: '60vh',\r\n        transform: 'rotate(45deg)',\r\n        padding: '40px',\r\n        pointerEvents: 'none',\r\n    },\r\n    Logo2Container:{\r\n        transform: 'rotate(-45deg)',\r\n        background: Colors.primaryDark,\r\n        marginLeft: '-50vw',\r\n    },\r\n}\r\n\r\nclass AppHeader extends Component{\r\n    render(){\r\n        return (\r\n         <div style={styleHeader.HeaderContainer}>\r\n            <div style={styleHeader.Layout1}>\r\n            <div style={styleHeader.Logo1Container}>\r\n            <img style={styleHeader.Logo1} src={Logo}/>\r\n            </div>\r\n            </div>\r\n            <div style={styleHeader.Layout2}>\r\n            <div style={styleHeader.Logo2Container}>\r\n            <img style={styleHeader.Logo2} src={Logo}/>\r\n            </div>\r\n            </div>\r\n         </div>\r\n        )\r\n    }\r\n}\r\nexport default AppHeader;\r\n\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../App.css';\r\nimport Colors from '../color.js';\r\n\r\nconst styleManifesto ={\r\n    HeaderContainer:{\r\n        backgroundColor:Colors.gray,\r\n        overflowY: 'auto',\r\n        height: '100vh',\r\n        width:'100vw'\r\n    }\r\n}\r\n\r\nclass Manifesto extends Component{\r\n    render(){\r\n        return(\r\n            <div style={styleManifesto.HeaderContainer}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Manifesto","import React, { Component } from 'react';\nimport './App.css';\nimport AppHeader from './sections/header.js';\nimport Manifesto from './sections/manifesto';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppHeader/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.80795992.png\";"],"sourceRoot":""}